name: iOS Build & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: macos-15  # Xcode 16 runner
    timeout-minutes: 30

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üß∞ Set up Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_16.app
          xcodebuild -version

      - name: üîç Find available iOS runtime
        id: runtime
        run: |
          echo "üì± Listing available runtimes..."
          xcrun simctl list runtimes
          # Pick only installed, available runtimes
          RUNTIME=$(xcrun simctl list runtimes -j | jq -r '.runtimes[] | select(.isAvailable == true and .identifier | contains("iOS")) | .identifier' | tail -1)
          if [ -z "$RUNTIME" ]; then
            echo "‚ùå No valid iOS runtime found!"
            exit 1
          fi
          echo "‚úÖ Using runtime: $RUNTIME"
          echo "RUNTIME=$RUNTIME" >> $GITHUB_ENV

      - name: üì± Create iOS Simulator
        id: create-sim
        run: |
          DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro"
          echo "Creating simulator..."
          DEVICE_ID=$(xcrun simctl create "CI-iPhone" "$DEVICE_TYPE" "$RUNTIME" 2>/dev/null || true)
          
          # If creation fails, fallback to an available simulator
          if [ -z "$DEVICE_ID" ]; then
            echo "‚ö†Ô∏è Fallback: finding existing available simulator..."
            DEVICE_ID=$(xcrun simctl list devices -j | jq -r '.devices[][] | select(.isAvailable == true and .name | contains("iPhone")) | .udid' | head -1)
          fi

          if [ -z "$DEVICE_ID" ]; then
            echo "‚ùå No available simulator could be found or created!"
            exit 1
          fi
          echo "‚úÖ Using simulator ID: $DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV

      - name: ‚ñ∂Ô∏è Boot Simulator
        run: |
          echo "Booting simulator..."
          xcrun simctl boot "$DEVICE_ID" || true
          xcrun simctl bootstatus "$DEVICE_ID" -b
          xcrun simctl list devices | grep -A 1 "$DEVICE_ID"

      - name: üèóÔ∏è Build for Testing
        run: |
          echo "Building project..."
          xcodebuild \
            -scheme Holdings_Assignment \
